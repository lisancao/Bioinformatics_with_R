##A brief introduction to Bioinformatics with R
====================================
##Before we start
-Bioconductor base package runs on 3.5.0 and is still in the process of being updated 
-Workshop notes are available off my Github (https://github.com/lisancao/Bioinformatics_with_R) 
-All of our exercises today are pulled from https://www.bioconductor.org/help/course-materials/2016/CSAMA/lab-5-chipseq/Epigenetics.html
-Please download and run the install_packages.R script to make sure you have everything needed 
-Warning that the mm9 genome package is >500mb 
===================================
##About me: 
-Lisa N. Cao (@lisancao on twitter and github) 
-Research assistant in the Sleep and Circadian Neuroscience Lab (Psychology Deparment), Rladies and Pyladies member. 
-Formerly IT for a linux computer lab. 
-Unhealthy obsession with neuroinformatics and open source tools at the moment 
-Thank you for entertaining me today! 
===================================
##About Bioconductor
-Provides a centralized hub for bioinformatics data analysis, integrated with R which many are using already. 
-Uses a single language as opposed to 4 (Python, Unix, Perl, C++). 
-A good tool for people who want to go deeper than GUI, but don't want to go the old school way. 
-Lots of tools and packages are associated with Bioconductor, making nearly anything possible. 
-Has a huge online community and ongoing support. 
=====================================
##Workshop technicalities 
-Today we will be mostly looking at epigenetic analysis of Chip-Seq data, particularly post-processed BED files
-This is going to be a pretty quick and dirty guide, I am basically skimming what is an entire field in roughly 1.5hrs. This means that there is a LOT that will be left out.
-Post-it notes are to be used for people who are having issues, please use them by placing them on your laptop. 
-More technical or background questions can be directed to me personally after the workshop or via email (lncao@sfu.ca)
-Some of these commands are a bit of a pain to type out, feel free to run the code directly from the R script
=====================================
##Some common terminology we'll run into today: 
`Bioinformatics /ˌbaɪ.oʊˌɪnfərˈmætɪks/ is an interdisciplinary field that develops methods and software tools for understanding biological data. As an interdisciplinary field of science, bioinformatics combines biology, computer science, mathematics and statistics to analyze and interpret biological data.`
-High throughput data: `Refers to the large genomic datasets generated by modern sequencing technology (e.g. Illumina)`
-Read: a sequence of a unique fragment, a cluster that is obtained as a result of sequencing 
-Read count: number of reads that overlap at a particular genomic position 
-Enrichment levels: Enriched regions, also known as 'peaks' denote signals that are significantly higher than the background (input or igG)
-Reference Genome (RefSeq): a representative example of a given species' set of genes, composed from a large variety of samples and do not represent any one individual. Our reference genome today will come from Ensembl. 
===========================
##A little about ChIP-seq:
-Chromatin immunoprecipitation combined with massively parallel DNA sequencing to identify DNA protein binding sites 
1. shear/digestion of DNA to 100-300bp 
2. immuno-precipitate with antibody specific to histone modification of interest
3. remove proteins from DNA and sequence directly and map to genome 
==========================
**image: chip-seq

===========================

*image: chip-seq workflow 

===========================
##Typical Chip-Seq Workflow:
##Preprocessing of data: 
-includes alignment, filtering, and peak finding (not covered here)
-Basically just data preparation so you can orientate yourself for downstream analyses
-Best done with terminal tools such as FastQC, samtools, Bowtie2, IGV, and MACS (possible in R but it's still quite a pain and involves deeper knowledge of data structures for conversion)
-Uses Python, Unix, Perl, C/C++  
===============================
##Downstream (Statistical) Analysis: 
-This is where R really shines, Bioconductor is a base package with lots of supplementary packages specifically for the analysis of genomics data
-Due to it's ability to handle large datasets, reproducibility, extensive documentation, and large community support R packages are preferred for analyses 
-Peak calling 
================================
##Visualization
-Can be done in R as well, Python is quite ahead in terms of visualization techniques however (e.g. HT-Seq) 
-Lots of ways to visualize genomics data, for publications heatmaps or circos plots are great. 
-Basic visualization can be done (scatterplots, histograms, boxplots) but doesn't capture the complexity of genomics data. At best used for visualizing a single gene of interest in more interdisciplinary work.
-With Python (and now R) animated and interactive visualizations are growing in popularity. Shoutout to gganimate! 
================================
##Purely GUI methods for entire workflow
-Galaxy: GUI based client that attempts to integrate entire workflow into one application. Free and Open Source (I think?), good community support. 
-Great for people who are not familiar with code, however like with any GUI based application it runs through a 'black-box' model
-Broad Institute's Gene Pattern: Another software on the market, I personally only know of it's existence
-Biolinux (outdated): A linux-distro that was designed specifically for bioinformatics, biophysics, and molecular modelling. No longer maintained and considered outdated. I still have it installed on one of my partitions. 
-There are tons of others, Galaxy however seems to be the most popular. 
===============================
##Common filetypes encountered in Bioinformatics

**image: filetypes table chart 


===================================
##Major Bioconductor Packages
    GenomicRanges: ‘Ranges’ to describe data and annotation. Fast comparison between genomic intervals; GRanges(), GRangesList()
    Biostrings: DNA and other sequences, DNAStringSet()
    GenomicAlignments: Aligned reads; GAlignemts() and friends
    GenomicFeatures, AnnotationDbi: annotation resources, TxDb, and org packages.
    SummarizedExperiment: coordinating experimental data
    rtracklayer: import Genome annotations e.g BED, WIG, GTF, etc
	biomaRt: easy access to databases with gene annotation, sequence conservation, sequence retrieval, etc. 
===================================
##Today's plan 
-Play around with post-processed genomics (Chip-Seq) data 
-import BED files into R using package rtracklayers
-extend Chip-Seq reads to match the extended fragment size 
-bin the data and generate bedGraphs 
-plot the tracks to a reference genome 
-Hope that time doesn't run out 
====================================
##Context for today
-we will be looking at the H3K37ac (enhancer) histone modification at chromosome 6 around the region of gene NanoG
-this will be done on the male mouse genome (where our sample comes from) 
-requires importing of a reference genome (in this case UCSC's mm9)
-histone modifications can be denoted by methylation levels 
-H3K37ac is actively methylated 

"The protein encoded by this gene is a DNA binding homeobox transcription factor involved in embryonic stem (ES) cell proliferation, renewal, and pluripotency. 
The encoded protein can block ES cell differentiation and can also autorepress its own expression in differentiating cells." -RefSeq
===================================
####################LAB PORTION############ (30MIN) 
===================================
##Importing BED files
-due do time constrained today we will be working with post-processed bed files, though typically your workflow would start with FASTA/FASTQ raw files 
-we will use the package rtracklayers to do this
-very straightforward and mostly just object assignment 
-we will then view the data to get to know some of it's basic features 
==================================
**Lab Excercise 1**
===================================
##fragment length estimation and read extension
-the actual fragment we attempt tp sequence tends to be longer than what we actually get in our data
-therefore, it is necessary to extend the alignment of the short read by a fixed amount 
-using package chipseq we will calculate the fragment length 
-using median(estimate.mean.fraglen(reads))
-and then resizeing with resize() to the width of the frag.len output 
-remove reads which exceed the chromosome length after extending using trim()
-and then set it up to have a nice output, mapped to function prepareChIPseq{} 
==================================
**Lab Exercise 2**
==================================
##Bin the Chip-Seq and controls 
-next we will count how many reads map to each of bin
-a bin is a pre-established genomic interval 
-important for visualization and signal distribution analysis 
-also used to assess coverage of our reads after extension
-we first generate the bins by tiling the genome into non-overlapping intervals of 200bp 
-this will be done using package GenomicRanges' tileGenome function to generate a GRanges Object 
-we will then plot the coverage and export the .bedGraph files 
==================================
**Lab Excercise 3**
==================================
##visualization of Chip-Seq data 
-using the Gviz package we can visualize our genomics data in the same way that we would a normal genome browser (IGV, UCSC) 
-like downstream analyses, there are many other ways to visualize the data using many packages
-Gviz relies on the generation of tracks, tracks can be annotated in various ways, such as signal strength, peaks, gene models, or CpG islands 
-we will first load in a gene model for the archived mouse genome assembly mm9 using biomaRt package 
-this will be our reference genome that we will use to map the sample tracks to 
-next we will input the tracks with our defined features 
-plot the input, rep1, rep2, bm(mm9), and AT(genomeaxistrack, the coordinate axis for the genomic span of the analyzed region) 
===================================
**Lab Exercise 4** 
===================================
##Peak Calling of ChIP-seq data 
-lots of algorithms out there that perform peak-finding. 
-MACS is most popular software at the moment for peak finding 
-In R BayesPeak package is available, among others 
-the tool you use depends highly on what you are trying to find and your study design 
-peak features vary depending on what you are looking at (e.g. transcription factor are defined and narrow)
-histone modification typically look for extended regions with higher coverage
-however, can be narrow combine with extended enrichment regions 
-as you may have noticed, our peaks are pretty well defined 
===================================
**Lab Exercise 5** 
===================================
##Direct tutorial that this workshop is based on: 
https://www.bioconductor.org/help/course-materials/2016/CSAMA/lab-5-chipseq/Epigenetics.html

=====================================
##Additional online resources (this is just the tip of the iceberg): 
#R & Bioconductor Manual by the UCR Institute for Integrative Genome Biology
http://manuals.bioinformatics.ucr.edu/home/R_BioCondManual
#R-exercises for Bioconductor 
https://www.r-exercises.com/product/introduction-to-bioconductor-annotation-and-analysis-of-genomes-and-genomic-assays/
#R-Bloggers Bioinformatics Tutorial
https://www.r-bloggers.com/bioinformatics-tutorial-with-exercises-in-r-part-1/
#Little Book of R for Bioinformatics
https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/src/chapter1.html
#Youtube channels: Bioinformaticsdotca, etc
Note: Bioinformatics is a fast moving field, and for that reason I recommend against using textbooks for this particular field. 
======================================








